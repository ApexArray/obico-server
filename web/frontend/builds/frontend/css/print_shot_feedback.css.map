{"version":3,"sources":["webpack:///src/print_shot_feedback/src/print_shot_feedback/App.vue"],"names":[],"mappings":"AA6RA,sBACA,gBACA,CAEA,wBACA,iBACA,CAEA,UAGA,OAGA,CAEA,oBAPA,cAAA,CACA,iBAAA,CAEA,OAAA,CACA,UASA,CANA,UAGA,QAGA","file":"print_shot_feedback.css","sourcesContent":["<template>\n  <div class=\"printshots-container row justify-content-center\">\n    <div class=\"col-sm-12 col-lg-6\">\n      <card v-if=\"loading\">\n        <div class=\"card-body\">\n          <div class=\"text-center\">\n            <i class=\"fas fa-spinner fa-spin\" />\n            Loading...\n          </div>\n        </div>\n      </card>\n\n      <card v-if=\"currentShot && !loading\">\n        <div class=\"card-header\">\n          <div class=\"clearfix\">\n            <div class=\"float-left\">\n              Feedback for #{{ currentIndex + 1 }} of\n              <strong>{{ this.shots.length }}</strong>\n            </div>\n            <div class=\"float-right\">\n              <strong v-if=\"progress == 100\">All answered!</strong>\n              <strong v-if=\"progress != 100\">{{ progress }}% answered</strong>\n            </div>\n          </div>\n          <progress-bar\n            class=\"clearfix\"\n            :max=\"100\"\n            :value=\"progress\"\n          >\n            {{ progress }} %\n          </progress-bar>\n        </div>\n        <div class=\"current-shot-container\">\n          <img\n            class=\"card-img-top\"\n            @click=\"next\"\n            :src=\"currentShot.image_url\"\n          >\n          <button\n            if-v=\"currentIndex !== prevIndex\"\n            class=\"prev-btn btn btn-primary\"\n            :disabled=\"updating\"\n            @click=\"prev\"\n          >\n            <i class=\"fas fa-lg fa-angle-left\" />\n          </button>\n          <button\n            if-v=\"currentIndex !== nextIndex\"\n            class=\"next-btn btn btn-primary\"\n            :disabled=\"updating\"\n            @click=\"next\"\n          >\n            <i class=\"fas fa-lg fa-angle-right\" />\n          </button>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"text-center\">\n            <answer-button\n              ref=\"button\"\n              :checked=\"currentShot.answer === consts.LOOKS_BAD\"\n              :updating=\"inFlightAnswer === consts.LOOKS_BAD && updating\"\n              :disabled=\"updating\"\n              checked-class=\"btn-danger\"\n              @click=\"looksBad\"\n            >\n              It contains spaghetti\n            </answer-button>\n            <answer-button\n              :checked=\"currentShot.answer === consts.LOOKS_OK\"\n              :updating=\"inFlightAnswer === consts.LOOKS_OK && updating\"\n              :disabled=\"updating\"\n              checked-class=\"btn-success\"\n              @click=\"looksOk\"\n            >\n              It does NOT contain spaghetti\n            </answer-button>\n            <answer-button\n              :checked=\"currentShot.answer === consts.UNANSWERED\"\n              :updating=\"inFlightAnswer === consts.UNANSWERED && updating\"\n              :disabled=\"updating\"\n              checked-class=\"btn-warning\"\n              @click=\"willDecideLater\"\n            >\n              I'll decide later\n            </answer-button>\n          </div>\n        </div>\n      </card>\n    </div>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios'\n\n  import AnswerButton from './components/AnswerButton.vue'\n  import ProgressBar from './components/ProgressBar.vue'\n  import Card from './components/Card.vue'\n\n  const printShotFeedbackListUrl = printId => `/api/v1/printshotfeedback/?print_id=${printId}`\n  const printShotFeedbackUrl = shotId => `/api/v1/printshotfeedback/${shotId}/`\n\n  const consts = {\n    LOOKS_OK: 'LOOKS_OK',\n    LOOKS_BAD: 'LOOKS_BAD',\n    UNANSWERED: '',\n    UNSET: null,\n  }\n\n  export default {\n    name: \"App\",\n    components: {\n      AnswerButton,\n      Card,\n      ProgressBar,\n    },\n    props: {\n      config: {\n        default: () => {},\n        type: Object,\n      },\n    },\n    data: function() {\n      return {\n        currentShotId: null,\n        loading: true,\n        imageLoading : true,\n        updating: false,\n        inFlightAnswer: null,\n        shots: [],\n      }\n    },\n    computed: {\n      currentIndex() {\n        const currentShotId = this.currentShotId\n\n        if (currentShotId === null || this.shots.length < 1) {\n          return null\n        }\n\n        return this.shots.findIndex((item) => currentShotId == item.id)\n      },\n\n      currentShot() {\n        const index = this.currentIndex\n\n        if (index === null) {\n          return null\n        }\n\n        return this.shots[index]\n      },\n\n      prevIndex() {\n        const index = this.currentIndex\n\n        if (index === null) {\n          return null\n        }\n\n        return index == 0 ? this.shots.length - 1 : index - 1\n      },\n\n      nextIndex() {\n        const index = this.currentIndex\n\n        if (index === null) {\n          return null\n        }\n\n        return index + 1 >= this.shots.length ? 0 : index + 1\n      },\n      progress() {\n        let answered = this.shots.filter((shot) => shot.answer !== consts.UNSET).length\n        let total = this.shots.length\n        return parseInt((answered / total) * 100)\n      }\n    },\n\n    created() {\n      this.consts = consts\n    },\n\n    mounted() {\n      this.fetchShots()\n\n      this.$el.addEventListener('keydown', (e) => {\n        if (this.updating) {\n          return\n        }\n\n        switch (e.key) {\n          case 'ArrowLeft':\n            this.prev()\n            break\n\n          case 'ArrowRight':\n            this.next()\n            break\n\n          default:\n            break\n        }\n      })\n    },\n    methods: {\n      looksOk() {\n        this.updateShot(this.currentShotId, consts.LOOKS_OK)\n      },\n\n      looksBad() {\n        this.updateShot(this.currentShotId, consts.LOOKS_BAD)\n      },\n\n      willDecideLater() {\n        this.updateShot(this.currentShotId, '')\n      },\n\n      next() {\n        if (this.nextIndex !== null) {\n          this.currentShotId = this.shots[this.nextIndex].id\n        }\n      },\n\n      prev() {\n        if (this.prevIndex !== null) {\n          this.currentShotId = this.shots[this.prevIndex].id\n        }\n      },\n\n      fetchShots() {\n        this.loading = true\n\n        axios\n          .get(printShotFeedbackListUrl(this.config.printId))\n\n          .then((response) => {\n            this.shots = response.data\n            this.shots.map((item) => {\n              item.answer = item.answer == consts.UNANSWERED ? consts.UNSET : item.answer\n              return item\n            })\n\n            if (this.shots.length > 0) {\n              this.currentShotId = this.shots[0].id\n            }\n          })\n\n          .catch((error) => {\n            console.log(error)\n            this.$swal('Ops', 'Something went wrong!', 'error').then(() => location.reload())\n          })\n\n          .finally(() => {\n            this.loading = false\n          })\n      },\n\n      updateShot: function(id, answer) {\n        this.updating = true\n        this.inFlightAnswer = answer\n\n        axios\n          .put(printShotFeedbackUrl(id), { answer: answer })\n\n          .then((response) => {\n            this.shots = this.shots.map((shot) => {\n              return shot.id === response.data.id ? response.data : shot\n            })\n          })\n\n          .catch(() => {\n            this.$swal('Ops', 'Could not save answer! Please retry!', 'error')\n          })\n\n          .finally(() => {\n            this.updating = false\n            this.inFlightAnswer = null\n          })\n      },\n    },\n  }\n</script>\n\n<style>\n  .printshots-container {\n    margin-top: 1.5em;\n  }\n\n  .current-shot-container {\n    position: relative;\n  }\n\n  .prev-btn {\n    display: inline;\n    position: absolute;\n    left: 2%;\n    top: 40%;\n    opacity: 0.5;\n  }\n\n  .next-btn {\n    display: inline;\n    position: absolute;\n    right: 2%;\n    top: 40%;\n    opacity: 0.5;\n  }\n</style>\n"]}